i had already done this for a networking class before, but thought id take another jab at it

goals:
- touch up socket programming and learn about how to make packets

things i remember about dns from networking:

- domain name system is what it stands for, i think.
- basically, you type in a url, which is the website you want to access, but to a computer, it really needs to know which server to access to ensure you get what you requested.
- first, it connects to the local dns cache. not sure how many there are per geographical location, but major website-ip address pairs will usually be found that way. google.com/va-midwest, netflix.com/va-midwest should mostly be available because they are commonly accessed websites. guessing your isp might also provide more relevant and personalized caching? need to look into this.
- if it doesn’t find it, first it checks the authoritative dns, which has major urls, then it goes to tld (i forget what it’s called exactly), which has top-level domains like google.com but not the specific location, and finally, if it’s still not found, it goes to the root-level dns server, which has .com and .org. there are 13 of these in the world.
- in terms of implementation, not sure if there’s a library or something that would help with this...

things i researched:

- i was sosos close, but the servers are checked in the opposite order. root-level first based on general domain name (.com, for example), then tld (top-level domain server) for google.com, and finally the authoritative server for something like midwest.google.com.

[link to rfc1035](https://datatracker.ietf.org/doc/html/rfc1035section-4.1.1)

a dns message has:

- a header
- a question section
- an answer section
- an authority section
- an additional section

dns header:

16 bits per field (2 bytes per field)

```
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                      ID                       |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    QDCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    ANCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    NSCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    ARCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
```

id - 0 (random? not sure if this matters)
qr - 0  (0 for queries -- i had mistakenly set this to 1 originally and everything kept timing out, no idea why)
opcode - 0000  (standard?)
aa - 0
tc - 0
rd - 0  (recursion not desired, iterative is better from what i recall because it reduces network traffic but might be slower)
ra - 0
z - 000
rcode - 0000

(each is two bytes below)
qdcount - 1
ancount - 0
nscount - 0
arcount - 0

dns question:
```
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                                               |
/                     QNAME                     /
/                                               /
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                     QTYPE                     |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                     QCLASS                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
```
qname - www.google.com (variable number of octets; no padding is used. need to convert url into parts based on the period with size followed by letters in hex/binary)
qtype - 1 (a for ip address of host i think?)
qclass - 1 (in for the internet?)

qtypes:
1 (a): standard host address (ip address)
2 (ns): nameserver record
5 (cname): canonical name record
15 (mx): mail exchanger record
12 (ptr): pointer record (reverse dns lookup)

interesting finds:

google’s public dns resolver essentially does what our isp does. i thought it was referring to google’s urls, but it’s not. you can configure your device to use google’s public dns resolver instead of your isp’s.

i originally thought, if you use google dns, you wouldn’t need an isp, but dns only gives you the address of the website to visit. you still need to actually make an http request or whatever to load the webpage—hence the need for an isp.

google public dns is supposedly faster because they cache a lot due to scraping so much of the internet regularly. google crawls the web, stores basic information about website content, pictures, videos, etc., and keeps a cached version in its servers. this helps them run their algorithm and display the most relevant urls for the user.

udp sockets are used for dns packets

i think this is the response field for dns:

```
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                                               |
/                      NAME                     /
|                                               |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                      TYPE                     |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                     CLASS                     |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                      TTL                      |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                   RDLENGTH                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
/                     RDATA                     /
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
```

i started making functions for all of the above to keep things organized. parsing bytes to integers/strings is super useful in networking.

lots of help from this site: (https://implement-dns.wizardzines.com/book/intro) — really liked it for learning the basics.
