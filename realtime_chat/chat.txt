building a chat client-server --- i've done this a little bit here and there.

goals:
- idk actually be able to communicate idk why i was mindblown by this but it was pretty cool

things i knew before:
- this will require sockets. the dns project needed it too, but this one is more explicit.
- sockets are like portals through which you communicate with other devices. kind of like a literal socket. the ip address corresponds to the device, and the port number specifies the specific socket you're connected to.
- for this project, the client will be sending on one port, and the server will be listening on another, so this means two files.
- multithreading applications -- do i want to do this in go? just to change up the language? network programming in go should be feasible, i just need to learn how to set up sockets and everything.
- but honestly, my retention would probably get diluted if i did it in go, so i'm going to do it in python instead and focus more on design.
- anytime a user connects to the server and types a message, it has to be broadcasted to everyone else.

things i researched:
- telnet was the precursor to ssh, basically allowed you to access a remote computer on your lan from your laptop.
- on mac, you have to use nc instead of telnet i think

tcp based echo service:
- one echo service is defined as a connection-based application on tcp.
- a server listens for tcp connections on tcp port 7.
- once a connection is established, any data received is sent back.
- this continues until the calling user terminates the connection.

implementation:
- started off by creating a tcp socket since i somewhat remember it.
- after setting that up, i had to figure out multithreading to allow for multiple clients.
- python also apparently has a library to support multiprocessing, which i think is like its version of "fork." but python locks don't actually use multiprocessing even if the computer supports it because it can only run on one interpreter. C, on the other hand, can handle multiple cores.
- another problem i faced was that clients wouldnâ€™t receive updates from the server from other clients until they sent a message first. this happened because the client was only receiving messages after it sent a message. so instead, i had to create another thread specifically for listening. after that, it was chill.
- i also wanted to try doing it using async. it allows for cooperative multitasking, kind of like multithreading, but there's only one thread and the library handles when things need to happen. but i got kinda tired and lazy oops. will experiment with asyncio some other day.

https://realpython.com/python-sockets/#handling-multiple-connections

