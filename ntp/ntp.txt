things i know:
- ntp stands for network time protocol. i know this because i took distributed systems, and we discussed it as a means of time synchronization (not a good one from what i recall?).
- used for telling the time.
- based on the traceroute project, i know icmp might be useful again? "timestamp request & reply" (type 13 & 14) are used to synchronize clocks between systems.

things i researched:
- one of the oldest protocols in existence.
- built on muzullo's algorithm.
- stratum-1 servers are directly connected to the time source (atomic clocks/gps), and then it's organized hierarchically after that. in theory, accuracy is highest for stratum-1 servers.
- ntp pool project: largest cluster of ntp servers. fascinating that 1/3 of the servers are in north america.
- "kiss of death" happens when you send too many packets, and the ntp server starts rate limiting you.
- i thought i was being rate-limited because my origin time kept returning 0, but i found out it's when the stratum is set to 0. you also get a RATE message as your ref id.
  (source: https://blog.scaledcode.com/blog/ntp-gone-wrong/)

ntp packet format:

        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |LI | VN  |Mode |    Stratum     |     Poll      |  Precision   |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                         Root Delay                            |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                         Root Dispersion                       |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                          Reference ID                         |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      +                     Reference Timestamp (64)                  +
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      +                      Origin Timestamp (64)                    +
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      +                      Receive Timestamp (64)                   +
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      +                      Transmit Timestamp (64)                  +
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      .                                                               .
      .                    Extension Field 1 (variable)               .
      .                                                               .
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      .                                                               .
      .                    Extension Field 2 (variable)               .
      .                                                               .
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                          Key Identifier                       |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                            dgst (128)                         |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

header setup:
- li (leap indicator) = 1 (no warning)
- vn (version number) = 4 (current ntp version)
- mode = 3 (client mode)
- stratum = 2 (apple's ntp is stratum 2) --> but honeslty can just default to 0, ntp knows which stratum to use 
- poll = 7 (default between 6-10)
- precision = 18

understanding timestamps:
- t0: client's timestamp of request packet transmission (use time.time before sending)
- t1: server's timestamp of request packet reception (3rd timestamp returned by ntp)
- t2: server's timestamp of response packet transmission (4th timestamp returned by ntp)
- t3: client's timestamp of response packet reception (use time.time after reception)

mistakes i made:
- originally assumed t0-t3 followed the order from the ntp documentation, but i was wrong. had to check another implementation to realize the correct mapping.
- origin timestamp (t0) is always 0 because the server doesn’t care about the client's time.
- ntp counts time since 1900, while unix counts time since 1970. why? no idea.
- timestamps are split: first 32 bits for the whole number, second 32 bits for the fractionals. crazy storage for fractions, but i guess that’s the price of precision.

helpful link:
https://blog.scaledcode.com/blog/ntp-gone-wrong/

reading documentation properly would have saved me so much debugging time oops