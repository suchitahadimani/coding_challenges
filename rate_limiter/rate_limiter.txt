this one felt a bit more personal, because i was asked to do this during an interview once, and absolutely failed. so time to try again :DDD

goals:

- build an api and properly learn postman

things i know:

- rate limiting controls how many requests a server can take within a certain timeframe, mostly to avoid overwhelming the servers.

things i researched:

 other reasons to rate limit:

- prevent spam and detect malicious attempts to flood servers (ddos attacks)
- ensure low-priority requests don't overwhelm high-priority ones
- handle sudden spikes in traffic

ways to limit the rate:

- token bucket: tokens are added to a bucket at a fixed rate. requests are processed if a token is available. helps handle bursts of traffic, but once tokens run out, processing slows to refill rate.
- leaky bucket: all requests go into a bucket, but they are processed at a fixed rate. if full, new requests are dropped. simpler to implement and ensures steady request flow.
- fixed time interval: if a user exceeds a set number of requests within a fixed window, remaining requests are dropped.
- sliding window: timestamps requests and keeps a rolling count within a moving window. if the count exceeds the max, new requests are rejected.
  - this is the one i tried to implement during the interview and failed. looking back, token bucket or even fixed interval would've been easier and still led to good discussions on trade-offs.

implementation struggles:

- after starting the app, the while loop i used for adding tokens didn’t seem to run properly—probably bad practice?
- used threading to replenish buckets at 1 req/sec. had to create separate threads for each rate limiter or else they wouldn't replenish correctly.
- initially used a single shared lock across all limiters, which sabotaged performance. left it as is for testing since i was running one at a time anyway.

testing multiple requests:

ran requests in parallel using `xargs -P` (where `-P` defines concurrency) and curl:

```sh
seq 1 10 | xargs -P 5 -I {} curl -X GET http://127.0.0.1:8080/token_bucket
```

 interesting find:

- cloudflare uses the sliding window counter approach for their projects (https://blog.cloudflare.com/counting-things-a-lot-of-different-things/)

 postman thoughts:

- actually really cool, especially the graphs -- it helped me compare rate limiting methods and understand trade-offs.
- some things it does could be replicated with a simple python script, but it's still useful.

 things you can do with postman:

- api testing: set concurrent users, iterations, and schedule/shared testing.
- use api keys during dev/staging.
- test api responses with built-in validation.
- mock api responses, which is great for frontend testing when backend isn’t ready.